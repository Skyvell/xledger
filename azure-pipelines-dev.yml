# Python Function App to Linux on Azure
# Build a Python function app and deploy it to Azure as a Linux function app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
      - configure_terraform

variables:
  - group: azure-devops-service-principal

  # Azure Resource Manager -connection created during pipeline creation.
  - name: azureSubscription
    value: 'c970b736-a87d-42e2-b2a6-73d193d9034e'

  # Function app name. This should match the 
  # name of the function app in terraform.tfvars file.
  - name: functionAppName
    value: 'xledger-syncronizer-dev'

  # Working Directory for function app.
  - name: workingDirectory
    value: '.'

  # Agent VM image name.
  - name: vmImageName
    value: 'ubuntu-latest'

  # Additional variables for Terraform.
  - name: rootFolder
    value: 'infrastructure/dev'
  - name: tfvarsFile
    value: 'terraform.tfvars'
  - name: adoEnvironment
    value: 'env01'

stages:
# Deploy azure infrastructure using Terraform.
- template: templates/deploy_infrastructure.yml
  parameters:
    rootFolder: '$(rootFolder)'
    tfvarsFile: '$(tfvarsFile)'
    adoEnvironment: '$(adoEnvironment)'

# Build the function app.
- template: templates/build-template.yml
  parameters:
    vmImageName: '$(vmImageName)'
    workingDirectory: '$(workingDirectory)'

# Deploy the function app.
- template: templates/deploy-template.yml
  parameters:
    azureSubscription: '$(azureSubscription)'
    functionAppName: '$(functionAppName)'
    vmImageName: '$(vmImageName)'
