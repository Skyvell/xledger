trigger:
- main

variables:
  azureSubscription: 'c970b736-a87d-42e2-b2a6-73d193d9034e'
  vmImageName: 'ubuntu-latest'
  terraformWorkingDirectory: '$(Build.SourcesDirectory)/infrastructure/terraform'
  terraformVersion: '1.8.5'
  environment: 'dev'  # Change this to 'prod' for production environment
  workdingdirDirectory: '.'
  functionAppName: 'xledger-syncronizer-dev'

- stage: Build
  displayName: 'Build Stage'
  dependsOn: Infra
  condition: succeeded()

  jobs:
  - job: Build
    displayName: 'Build'
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.11'
      inputs:
        versionSpec: 3.11

    - bash: |
        pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
      workingDirectory: $(workingDirectory)
      displayName: 'Install application dependencies'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(workingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: 'Deploy'
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@2
            displayName: 'Deploy Azure Function App'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionAppLinux
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
