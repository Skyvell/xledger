# Python Function App to Linux on Azure
# Build a Python function app and deploy it to Azure as a Linux function app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'c970b736-a87d-42e2-b2a6-73d193d9034e'

  # Function app name
  functionAppName: 'xledger-syncronizer-dev'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Working Directory. 
  workingDirectory: '.'

  # Resource group name
  resourceGroupName: 'DDBI-ResourceGroup'

  # Bicep and parameter file paths
  bicepFile: './infrastructure/bicep/main.bicep'
  parameterFile: './infrastructure/bicep/dev.parameters.json'

stages:
- stage: Infra
  displayName: 'Infrastructure Deployment'
  jobs:
  - job: DeployInfra
    displayName: 'Deploy Infrastructure'
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: AzureCLI@2
      displayName: 'Deploy Infrastructure with Bicep'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az deployment group create --resource-group $(resourceGroupName) --template-file $(bicepFile) --parameters @$(parameterFile)

- stage: Build
  displayName: 'Build Stage'
  dependsOn: Infra
  condition: succeeded()

  jobs:
  - job: Build
    displayName: 'Build'
    pool:
      vmImage: $(vmImageName)

    steps:
    - bash: |
        if [ -f extensions.csproj ]
        then
            dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
        fi
      workingDirectory: $(workingDirectory)
      displayName: 'Build extensions'

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.11'
      inputs:
        versionSpec: 3.11

    - bash: |
        pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
      workingDirectory: $(workingDirectory)
      displayName: 'Install application dependencies'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(workingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: 'Deploy'
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@2
            displayName: 'Deploy Azure Function App'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: functionAppLinux
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
