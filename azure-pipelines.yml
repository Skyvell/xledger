trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation.
  azureSubscription: 'c970b736-a87d-42e2-b2a6-73d193d9034e'

  # Agent VM image name.
  vmImageName: 'ubuntu-latest'

  # Working Directory for function app. 
  terraformWorkingDirectory: './infrastructure/terraform'

  # Terraform version
  terraformVersion: '1.8.5'

stages:
- stage: Infra
  displayName: 'Infrastructure Deployment'
  jobs:
  - job: DeployInfra
    displayName: 'Deploy Infrastructure'
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: $(terraformVersion)

    - checkout: self

    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: $(workingDirectory)
        backendServiceArm: $(azureSubscription)

    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: $(workingDirectory)
        commandOptions: '-var-file="dev.tfvars"'

    - task: TerraformTaskV2@2
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: $(workingDirectory)
        commandOptions: '-var-file="dev.tfvars" -auto-approve'

#- stage: Build
#  displayName: 'Build Stage'
#  dependsOn: Infra
#  condition: succeeded()
#
#  jobs:
#  - job: Build
#    displayName: 'Build'
#    pool:
#      vmImage: $(vmImageName)
#
#    steps:
#    - task: UsePythonVersion@0
#      displayName: 'Use Python 3.11'
#      inputs:
#        versionSpec: 3.11
#
#    - bash: |
#        pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
#      workingDirectory: $(workingDirectory)
#      displayName: 'Install application dependencies'
#
#    - task: ArchiveFiles@2
#      displayName: 'Archive files'
#      inputs:
#        rootFolderOrFile: '$(workingDirectory)'
#        includeRootFolder: false
#        archiveType: zip
#        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#        replaceExistingArchive: true
#
#    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#      artifact: drop
#
#- stage: Deploy
#  displayName: 'Deploy Stage'
#  dependsOn: Build
#  condition: succeeded()
#
#  jobs:
#  - deployment: Deploy
#    displayName: 'Deploy'
#    environment: 'development'
#    pool:
#      vmImage: $(vmImageName)
#
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#          - task: AzureFunctionApp@2
#            displayName: 'Deploy Azure Function App'
#            inputs:
#              azureSubscription: '$(azureSubscription)'
#              appType: functionAppLinux
#              appName: $(functionAppName)
#              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
