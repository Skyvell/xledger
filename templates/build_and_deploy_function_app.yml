parameters:
- name: azureSubscription
  type: string
- name: functionAppName
  type: string
- name: vmImageName
  type: string
- name: functionAppRootDirectory
  type: string

stages:
- stage: 'Build_Function_App'
  displayName: 'Build Function App'
  jobs:
  - job: Build
    displayName: 'Build Function App'
    pool:
      vmImage: ${{ parameters.vmImageName }}

    steps:
    - bash: |
        if [ -f extensions.csproj ]
        then
            dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
        fi
      workingDirectory: ${{ parameters.functionAppRootDirectory }}
      displayName: 'Build extensions'

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.11'
      inputs:
        versionSpec: '3.11'

    - bash: |
        pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
      workingDirectory: ${{ parameters.functionAppRootDirectory }}
      displayName: 'Install application dependencies'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: ${{ parameters.functionAppRootDirectory }}
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: 'Deploy_Function_App'
  displayName: 'Deploy Function App'
  dependsOn: 'Build_Function_App'
  jobs:
  - deployment: Deploy
    displayName: 'Deploy Function App'
    environment: 'development'
    pool:
      vmImage: ${{ parameters.vmImageName }}
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureFunctionApp@2
            displayName: 'Deploy Azure Function App'
            inputs:
              azureSubscription: ${{ parameters.azureSubscription }}
              appType: functionAppLinux
              appName: ${{ parameters.functionAppName }}
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
